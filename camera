#include <WebServer.h>
#include <WiFi.h>
#include <esp32cam.h>

// SUBSTITUA AQUI pelas suas credenciais de Wi-Fi
const char* WIFI_SSID = "SEU_WIFI_AQUI"; 
const char* WIFI_PASS = "SUA_SENHA_AQUI"; 

WebServer server(80); //servidor en el puerto 80

static auto loRes = esp32cam::Resolution::find(320, 240); //baixa resolucion
static auto hiRes = esp32cam::Resolution::find(800, 600); //alta resolucion 

void
serveJpg() //captura imagem .jpg
{
  auto frame = esp32cam::capture();
  if (frame == nullptr) {
    Serial.println("CAPTURE FAIL");
    server.send(503, "", "");
    return;
  }
  Serial.printf("CAPTURE OK %dx%d %db\\n", frame->getWidth(), frame->getHeight(),
                static_cast<int>(frame->size()));

  server.setContentLength(frame->size());
  server.send(200, "image/jpeg");
  WiFiClient client = server.client();
  frame->writeTo(client);  // y envia a un cliente (en este caso sera python)
}

void
handleJpgHi() //permite enviar a resolução de imagem alta
{
  if (!esp32cam::Camera.changeResolution(hiRes)) {
    Serial.println("SET-HI-RES FAIL");
  }
  serveJpg();
}


void
setup()
{
  Serial.begin(115200);
  Serial.println();

  {
    using namespace esp32cam;
    Config cfg;
    // IMPORTANTE: Usa a configuração padrão da placa AI-Thinker
    cfg.setPins(pins::AiThinker); 
    cfg.setResolution(hiRes);
    cfg.setBufferCount(2);
    cfg.setJpeg(80);

    bool ok = Camera.begin(cfg);
    Serial.println(ok ? "CAMARA OK" : "CAMARA FAIL");
  }

  WiFi.persistent(false);
  WiFi.mode(WIFI_STA);
  WiFi.begin(WIFI_SSID, WIFI_PASS); //nos conectamos a la red wifi
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("WiFi conectado. IP: ");
  Serial.println(WiFi.localIP()); // ANOTE ESTE IP!

  server.on("/", []() {
    server.send(200, "text/plain", "ESP32-CAM is online. Use /cam-hi.jpg for frame.");
  });
  server.on("/cam-hi.jpg", handleJpgHi); // Endpoint usado pelo Servidor Python
  
  server.begin();
}

void
loop()
{
  server.handleClient();
}